---
title: "Client Report - [Project 3]"
subtitle: "Course DS 250"
author: "Duane Siu"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np
import datetime as dt

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
```


## Elevator pitch

_When you hear the word “relationship” what is the first thing that comes to mind? Probably not baseball. But a relationship is simply a way to describe how two or more objects are connected. There are many relationships in baseball such as those between teams and managers, players and salaries, even stadiums and concession prices. The graphs on Data Visualizations from Best Tickets show many other relationships that exist in baseball.

For this project, your client would like developed SQL queries that they can use to retrieve data for use on their website without needing Python. They would also like to see example Altair charts._

```{python}
con = sqlite3.connect('lahmansbaseballdb.sqlite')
```

__Highlight the grand questions__

## GRAND QUESTION 1

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

_The usage of my name Duane has started gaining popularity since 1900s but started to decline from 1960s. During my birth year of 2000s the name is seldomly used compared to a century ago._

```{python}
## My name
df = pd.read_sql_query("""
    SELECT DISTINCT Salaries.playerID, CollegePlaying.schoolID, Salaries.teamID, Salaries.Salary, Salaries.yearID
    FROM Salaries 
    JOIN CollegePlaying ON Salaries.playerID = CollegePlaying.playerID
    WHERE CollegePlaying.schoolID LIKE "%BYUI%"
    ORDER BY salary DESC
    """, con)

df
```

## GRAND QUESTION 2a

__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

_She will be around the age of 30-35._

```{python}
df = pd.read_sql_query("""
    SELECT playerid, yearID, (h*1.0)/ab AS "Batting Average"
    FROM batting
    WHERE ab >= 1
    ORDER BY "Batting Average" DESC, playerid 
    LIMIT 5
    """, con)

df
```

## GRAND QUESTION 2b 

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

_We can see Mary is the most popular name out of the four while Martha and Peter being the least popular overall._
_Martha name's popularity increased gradually from 1920s and peaked at around 1950s then started deacreasing._
_Peter followed a similar trend with Martha but with a slightly lesser increase and decrease over the entire period._

```{python}
df = pd.read_sql_query("""
    SELECT playerid, yearID, (h+0.0)/ab AS "Batting Average"
    FROM batting
    WHERE ab >= 10
    ORDER BY "Batting Average" DESC, playerid
    LIMIT 5
    """, con)

df
```

_include figures in chunks and discuss your findings in the figure._

## GRAND QUESTION 2c

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results.__

_The movie I chose was Star Wars since Anakin's introduction in Star Wars: Episode I - The Phantom Menace as a kid. The usage of the name spiked during 2005 the movie release year, indicating a strong correlation between the movie and the popularity of the name_

```{python}
df = pd.read_sql_query("""
    SELECT playerid, yearID, (h+0.0)/SUM(ab) AS "Career Batting Average"
    FROM batting
    GROUP BY playerid
    HAVING SUM(ab) >= 100
    ORDER BY "Career Batting Average" DESC
    LIMIT 5
    """, con)

df
```
## GRAND QUESTION 3

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph in Altair to visualize the comparison. What do you learn?__

_The movie I chose was Star Wars since Anakin's introduction in Star Wars: Episode I - The Phantom Menace as a kid. The usage of the name spiked during 2005 the movie release year, indicating a strong correlation between the movie and the popularity of the name_

```{python}
compare = pd.read_sql_query("""
    SELECT teamID, w
    FROM Pitching
    ORDER BY w DESC
    LIMIT 2
    """, con)

compare

chart = (alt.Chart(compare, title = "Team Comparison")
        .encode(
            x = alt.Y("teamID", title = "Teams"),
            y = alt.X("W", title = "Wins"),
            color = alt.Color("teamID", title = "Teams")
        ).mark_bar()
)

chart
```